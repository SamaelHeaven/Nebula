name: Create or Replace Dev Release

on:
  push:
    branches:
      - main

jobs:
  create_or_replace_dev_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create or Replace Release
        id: create_or_replace_release
        run: |
          # Get the latest commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)

          # Create or update the release named 'dev'
          RELEASE_ID=$(curl -X GET -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/dev" | jq -r '.id')

          if [ "$RELEASE_ID" != "null" ]; then
            # If release exists, update it
            curl -X PATCH -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}" -H "Accept: application/vnd.github.v3+json" -d "{\"tag_name\":\"dev\",\"target_commitish\":\"${GITHUB_SHA}\",\"name\":\"Dev Release\",\"body\":\"Release created by GitHub Actions\",\"draft\":false,\"prerelease\":false}"
          else
            # If release doesn't exist, create it
            curl -X POST -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" -H "Accept: application/vnd.github.v3+json" -d "{\"tag_name\":\"dev\",\"target_commitish\":\"${GITHUB_SHA}\",\"name\":\"Dev Release\",\"body\":\"Release created by GitHub Actions\",\"draft\":false,\"prerelease\":false,\"asset_links\":[{\"name\":\"source-code.zip\",\"url\":\"https://github.com/${GITHUB_REPOSITORY}/archive/refs/heads/main.zip\"}]}"
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
